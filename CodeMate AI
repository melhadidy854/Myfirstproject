
المكونات الرئيسية:

1. 💬 Chat with AI Assistant – الدردشة مع المساعد الذكي.


2. ✍️ Enter your code here – إدخال الكود البرمجي.


3. 📤 Send – زر إرسال الكود.


4. 📂 Upload Code – زر لتحميل كود من الجهاز.


5. ✅ Output: Explanation / Fix / Improve – الإخراج يتضمن التفسير، التصحيح، والتحسينات.
الخطوة الأولى: إنشاء الهيكل الأساسي (Frontend)

سنبدأ بكتابة HTML + CSS + JavaScript لإنشاء الشكل الأساسي والتفاعل مع المستخدم. سأكتب لك الآن الكود الأولي لصفحة الموقع.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Code Assistant</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>💡 AI Code Assistant</h1>
        
        <div class="chat-box" id="chatBox">
            <p>💬 Chat with AI Assistant...</p>
        </div>
        
        <textarea id="codeInput" placeholder="✍️ Enter your code here..."></textarea>
        
        <div class="buttons">
            <button id="uploadBtn">📂 Upload Code</button>
            <button id="sendBtn">📤 Send</button>
        </div>
        
        <div class="output-box" id="outputBox">
            <p>✅ Output: Explanation / Fix / Improve...</p>
        </div>
    </div>
    
    <script src="script.js"></script>
</body>
</html>


Style Css 
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    text-align: center;
}

.container {
    width: 50%;
    margin: auto;
    padding: 20px;
    background: white;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
}

.chat-box, .output-box {
    width: 100%;
    height: 150px;
    border: 1px solid #ccc;
    margin: 10px 0;
    padding: 10px;
    overflow-y: auto;
    background: #fafafa;
    text-align: left;
}

textarea {
    width: 100%;
    height: 100px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.buttons {
    display: flex;
    justify-content: space-between;
}

button {
    width: 48%;
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

#sendBtn {
    background: black;
    color: white;
}

#uploadBtn {
    background: gray;
    color: white;
}

JavaScript 
document.getElementById("sendBtn").addEventListener("click", function() {
    let code = document.getElementById("codeInput").value;
    let chatBox = document.getElementById("chatBox");
    let outputBox = document.getElementById("outputBox");
    
    if (code.trim() === "") {
        alert("Please enter some code first!");
        return;
    }

    chatBox.innerHTML += `<p>👤 You: ${code}</p>`;
    outputBox.innerHTML += `<p>🤖 AI: Processing your code...</p>`;

    // هنا سيتم إرسال الكود إلى السيرفر لتحليله لاحقًا
});

document.getElementById("uploadBtn").addEventListener("click", function() {
    alert("File upload feature coming soon! 🚀");
});



🔹 الخطوة الثانية: إضافة الذكاء الاصطناعي (Backend)

الآن سنضيف جزء الخلفية (Backend) باستخدام Python + Flask لمعالجة الكود البرمجي المُدخل وتحليله. 🚀


---

📜 1️⃣ تثبيت الأدوات المطلوبة

قبل أن نبدأ، تأكد من تثبيت Flask وOpenAI API لمعالجة الأكواد. افتح Terminal أو CMD واكتب


الذكاء الاصطناعي 
from flask import Flask, request, jsonify
import openai

app = Flask(__name__)

# ضع مفتاح OpenAI API هنا
openai.api_key = "YOUR_OPENAI_API_KEY"

@app.route("/process_code", methods=["POST"])
def process_code():
    data = request.json
    user_code = data.get("code", "")

    if not user_code:
        return jsonify({"error": "No code provided!"}), 400

    # إرسال الكود إلى نموذج OpenAI للحصول على شرح أو تصحيح
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a helpful AI assistant that explains and fixes code."},
            {"role": "user", "content": f"Please analyze and fix this code:\n{user_code}"}
        ]
    )

    ai_response = response["choices"][0]["message"]["content"]

    return jsonify({"output": ai_response})

if __name__ == "__main__":
    app.run(debug=True)

 تعديل script.js ليرسل الكود إلى السيرفر

استبدل الكود الموجود في script.js بهذا:

document.getElementById("sendBtn").addEventListener("click", async function() {
    let code = document.getElementById("codeInput").value;
    let chatBox = document.getElementById("chatBox");
    let outputBox = document.getElementById("outputBox");

    if (code.trim() === "") {
        alert("Please enter some code first!");
        return;
    }

    chatBox.innerHTML += `<p>👤 You: ${code}</p>`;
    outputBox.innerHTML += `<p>🤖 AI: Processing your code...</p>`;

    try {
        let response = await fetch("http://127.0.0.1:5000/process_code", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ code: code })
        });

        let result = await response.json();
        outputBox.innerHTML += `<p>✅ AI Response: ${result.output}</p>`;
    } catch (error) {
        outputBox.innerHTML += `<p>❌ Error: Failed to connect to AI.</p>`;
    }
});